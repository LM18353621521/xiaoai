<?php
/**
 * Created by PhpStorm.
 * User: Administrator
 * Date: 2018/9/9
 * Time: 23:37
 */

namespace app\home\controller;

use app\common\logic\OrderLogic;
use think\AjaxPage;
use think\Page;

class Order extends Base
{
    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        $user = session('userinfo');
        $order_num = db(\tname::mall_order)->where(array('vip_id' => $user['vip_id']))->count();
        $count_data['order_num'] = $order_num;
        $coupon_num = db(\tname::coupon_mycoupon)->where(array('vip_id' => $user['vip_id']))->count();
        $count_data['coupon_num'] = $coupon_num;
        $address_num = db(\tname::vip_myaddress)->where(array('vip_id' => $user['vip_id']))->count();
        $count_data['address_num'] = $address_num;
        $collect_num = db(\tname::goods_collect)->where(array('vip_id' => $user['vip_id']))->count();
        $count_data['collect_num'] = $collect_num;
        $this->assign('count_data', $count_data);
        if (empty($user)) {
            $this->error('你还没有登录，请先登录');
        }

    }

    public function order_list()
    {
        error_reporting(E_ERROR | E_PARSE);
        $user = session('userinfo');
        $OrderLogic = new OrderLogic();
        $vip_ids = session('vip_ids');
        $pdata = input('');
        $status = input('param.status', 0);

        $sort = "create_time desc";
        $where['vip_id'] = array('in', $vip_ids);
        $where['user_hide'] = 0;
        switch ($status) {
            case 1:
                $where['status'] = 0;
                break;
            case 2:
                $where['status'] = 1;
                break;
            case 3:
                $where['status'] = 2;
                break;
            case 4:
                $where['status'] = 3;
                $where['is_comment'] = 0;
            case 5:
                $where['status'] = -2;
                break;
        }

        $count = db(\tname::mall_order)->alias('a')->where($where)->count();
        $page = new Page($count, 5);
        $dataList = db(\tname::mall_order)->alias('a')
            ->field('a.*')
            ->where($where)->order($sort)
            ->limit($page->firstRow . ',' . $page->listRows)->select();
        foreach ($dataList as &$val) {
            $orderlog = db(\tname::mall_orderlog)->where(array('order_id' => $val['id']))->select();
            $val['orderlog'] = $orderlog;
        }
        $count_order = $OrderLogic->get_order_num($vip_ids);

        $this->assign('dataList', $dataList);
        $this->assign('page', $page);// 赋值分页输出
        $this->assign('status', $status);
        $this->assign('count_order', $count_order);
        $this->assign('title', '我的订单');
        return $this->fetch();
    }

    /**
     * 订单详情
     */
    public function orderdetail()
    {
        $user = session('userinfo');
        $OrderLogic = new OrderLogic();
        $pdata = input('param.');
        $pdata['vip_id'] = $user['vip_id'];
        $order = $OrderLogic->getOrderInfo($pdata['vip_id'], $pdata['order_id']);
        $order_status = array(
            '0' => "等待付款",
            '1' => "待发货",
            '2' => "已发货",
            '3' => "已完成",
            '-1' => "已取消",
            '-2' => "申请退款",
            '-3' => "已退款",
        );
        $order['status_text'] = $order_status[$order['status']];

        $wuliu = array('message' => 'fail', 'data' => []);
        if ($order['status'] > 2) {
            $BasicLogic = new \app\common\logic\BasicLogic();
            $wuliu = $BasicLogic->queryExpress($order['express_id'], $order['express_number']);
        }
        $this->assign('wuliu', $wuliu);

        $cancel_time = tpCache('shopping.cancel_time');
        $diff_time = $cancel_time * 3600 - (time() - $order['create_time']);
        $sub_time['hour'] = intval($diff_time / 3600);
        $sub_time['min'] = intval(($diff_time % 3600) / 60);
        $this->assign('sub_time', $sub_time);

        //配送方式
        $express = db(\tname::express)->where('id', $order['express_id'])->find();
        $pay_type = Config('pay_type');
        $order['pay_type_text'] = $pay_type[$order['pay_type']];
        $this->assign('order', $order);
        $this->assign('express', $express);
        $this->assign('title', '订单详情');
        return $this->fetch();
    }


    /**
     * 订单支付
     */
    public function settlement()
    {
        $user = session('userinfo');
        $OrderLogic = new OrderLogic();
        $pdata = input('param.');
        $pdata['vip_id'] = $user['vip_id'];
        $order = $OrderLogic->getOrderInfo($pdata['vip_id'], $pdata['order_id']);
        $order_status = array(
            '0' => "等待付款",
            '1' => "待发货",
            '2' => "已发货",
            '3' => "已完成",
            '-1' => "已取消",
            '-2' => "申请退款",
            '-3' => "已退款",
        );
        $order['status_text'] = $order_status[$order['status']];

        $wuliu = array('message' => 'fail', 'data' => []);
        if ($order['status'] > 2) {
            $BasicLogic = new \app\common\logic\BasicLogic();
            $wuliu = $BasicLogic->queryExpress($order['express_id'], $order['express_number']);
        }
        $this->assign('wuliu', $wuliu);

        //配送方式
        $express = db(\tname::express)->where('id', $order['express_id'])->find();
        $pay_type = Config('pay_type');
        $order['pay_type_text'] = $pay_type[$order['pay_type']];
        $this->assign('order', $order);
        $this->assign('express', $express);
        $this->assign('title', '订单详情');
        return $this->fetch();
    }

    /**
     * 添加订单
     * @return \think\response\Json
     */
    public function orderadd()
    {
        $user = session('userinfo');
        $pdata = input('post.');
        $pdata['vip_id'] = $user['vip_id'];
        //生成订单
        $OrderLogic = new \app\common\logic\OrderLogic();
        $pdata['order_source'] = 'pc';
        $result = $OrderLogic->orderAdd($pdata,"pc");
        if ($result['status'] != 1) {
            return json(ajaxFalse($result['msg']));
        }
        if ($pdata['pay_type'] == 'alipay') {
            $url = url('order/order_pay', array('order_id' => $result['order']['id'], 'pay_type' => 'alipay'));
        }
        if ($pdata['pay_type'] == 'wxpay') {
            $url = url('order/order_pay', array('order_id' => $result['order']['id'], 'pay_type' => 'wxpay'));
        }
        return json(ajaxSuccess($result['order'], $result['msg'], $url));
    }

    public function order_pay()
    {
        $user = session('userinfo');
        $pdata = input('param.');
        $pay_type = $pdata['pay_type'];
        $OrderLogic = new OrderLogic();
        $order = $OrderLogic->getOrderInfo($user['vip_id'], $pdata['order_id']);
        if ($order['status'] == 1) {
            $this->error("订单已支付", url('Order/order_list'));
        }
        if ($pay_type == 'alipay') {
            $apipay = new \alipay\Pagepay();
            $money = $order['pay_money'];
            $params = array(
                'out_trade_no' => $order['order_number'],
                'subject' => '晓爱科技',
                'total_amount' => $money,
                'return_url' => get_domain() . url('order/order_list'),
                'notify_url' => get_domain() . url('Special/indepNotify', array('uid' => WID)),
            );
            $apipay::pay($params);
        }
        if ($pay_type == 'wxpay') {
            $this->redirect(url('Order/cashier', array('order_id' => $order['id'])));
//            $this->assign('order', $order);
//            return $this->fetch('wxpay');
        }
    }

    public function qrcode($url)
    {
        vendor('phpqrcode.phpqrcode');//引入插件类
        header('Content-Type: image/png');
        $data = $url;
        $level = 'H';
        $size = 6;
        $result = \QRcode::png($data, false, $level, $size);
        return $result;
    }

    public function cashier()
    {
        $user = session('userinfo');
        $pdata = input('param.');
        $OrderLogic = new OrderLogic();
        $order = $OrderLogic->getOrderInfo($user['vip_id'], $pdata['order_id']);
        $order['order_number'] = $order['order_number'] . time();
        $this->assign('order', $order);
        return $this->fetch();
    }

    public function check_wxpay()
    {
        $order_sn = input('order_sn');
        $order_sn = substr($order_sn, 0, 12);
        $order = db(\tname::mall_order)->where(array('order_number' => $order_sn))->find();
        if ($order['status'] != 0) {
            return ajaxSuccess("", "", get_domain() . url('order/order_list'));
        }
        return ajaxFalse();
    }


    public function wx_qrcode()
    {
        $user = session('userinfo');
        $order_id = input('order_id');
        $OrderLogic = new OrderLogic();
        $order = $OrderLogic->getOrderInfo($user['vip_id'], $order_id);
        $url = [
            'notify_url' => get_domain() . '/home/Special/wxindepNotify/uid/' . WID,
            'success_url' => get_domain() . '/home/Home/index',
            'fail_url' => get_domain() . '/home/Home/index',
        ];
        $money = $order['pay_money'];
//        $money = 0.01;
        $order_number = $order['order_number'];
        $result = wxPay(2, "", $money, $order_number, $url, '下单', 'NATIVE', 'applet');

        vendor('phpqrcode.phpqrcode');//引入插件类
        header('Content-Type: text/html; charset=utf-8');
        $code_url = $result['code_url'];
        $level = 'H';
        $size = 4;
        return $this->qrcode($code_url);
    }

    /**
     * 取消订单
     */
    public function order_cancel()
    {
        $user = session('userinfo');
        $OrderLogic = new OrderLogic();
        $pdata = input('');
        $pdata['vip_id'] = $user['vip_id'];
        $result = $OrderLogic->order_cancel($pdata['order_id']);
        if ($result['status'] != 1) {
            return json(ajaxFalse($result['msg']));
        }
        $order = $OrderLogic->getOrderInfo($pdata['vip_id'], $pdata['order_id']);
        return json(ajaxSuccess($order, $result['msg']));
    }

    /**
     * 删除订单
     */
    public function order_del()
    {
        $OrderLogic = new OrderLogic();
        $pdata = input('');
        $result = $OrderLogic->order_del($pdata['order_id']);
        if ($result['status'] != 1) {
            return json(ajaxFalse($result['msg']));
        }
        return json(ajaxSuccess('', $result['msg']));
    }

    /**
     * 订单确认收货
     */
    public function order_confirm()
    {
        $user = session('userinfo');
        $OrderLogic = new OrderLogic();
        $pdata = input('');
        $pdata['vip_id'] = $user['vip_id'];
        $result = $OrderLogic->order_confirm($pdata['order_id']);
        if ($result['status'] != 1) {
            return json(ajaxFalse($result['msg']));
        }
        $order = $OrderLogic->getOrderInfo($pdata['vip_id'], $pdata['order_id']);
        return json(ajaxSuccess($order, $result['msg']));
    }


    /**
     * 评价
     */
    public function comment()
    {
        $user = session('userinfo');
        $pdata = input('');
        $OrderLogic = new OrderLogic();
        $order = $OrderLogic->getOrderInfo($user['vip_id'], $pdata['order_id']);
        if (request()->post()) {
            foreach ($pdata['comment'] as $val) {
                $data['vip_id'] = $user['vip_id'];
                $data['nickname'] = $user['nickname'];
                $data['headimg'] = $user['headimgurl'];
                $data['order_id'] = $pdata['order_id'];
                $data['product_id'] = $val['goods_id'];
                $data['star'] = $val['star'];
                $data['content'] = $val['content'];
                $data['is_anonymous'] = $pdata['is_anonymous'];
                $images = array();
                if (isset($val['imgs'])) {
                    foreach ($val['imgs'] as $v) {
                        $path = "uploads";
                        $image = base64_image_content($v, $path);
                        if ($image) {
                            $images[] = $image;
                        }
                    }
                }
                $data['imgpath'] = serialize($images);
                $data['create_time'] = time();
                $datas[] = $data;
            }
            $res = db(\tname::mall_comment)->insertAll($datas);
            if (!$res) {
                return ajaxFalse();
            }
            $updataorder = array(
                'id' => $pdata['order_id'],
                'is_comment' => 1,
            );
            $res1 = dataUpdate(\tname::mall_order, $updataorder);
            return ajaxSuccess('', '提交成功', url('Order/myorder'));
        }
        $this->assign('order', $order);
        return $this->fetch();
    }


    /**
     * 处理支付的反馈结果——订单支付完成    2018-10-19
     */
    public function indepNotify()
    {
        $uid = input('param.uid');
        $xml = file_get_contents('php://input');
        $data = xmltoarray($xml);
        $pay = db(\tname::weixin_pay)->where(array('uid' => $uid, 'type' => 'applet'))->find();
        $wxpayparam = serializeMysql($pay['wxpay'], 1);
        $Wxpay = new \wechat\Wxpay();
        $sign = $Wxpay->checksign($data, $wxpayparam);
        $returnParameters = array();
        if ($sign == false) {
            $returndata = array(
                'return_code' => 'FAIL',
                'return_msg' => '签名失败'
            );
        } else {
            $returndata = array(
                'return_code' => 'SUCCESS',
                'return_msg' => 'OK'
            );
        }
        $xml = new \SimpleXMLElement('<xml></xml>');
        data2xml($xml, $returndata);
        $returnXml = $xml->asXML();
        echo $returnXml;
        apilog($uid, 'wechat', 'wxpaynotify-money', '', $data, $returndata);
        //$data['out_trade_no'] = '201711142845';
        $order = db(\tname::mall_order)->where('order_number', $data['out_trade_no'])->find();
        $OrderLogic = new OrderLogic();
        $OrderLogic->order_pay_sucsess($order);
    }


}